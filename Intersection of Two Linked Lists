class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
       
       /* while(headB!=NULL)
        {
            ListNode* curr=headA;
            while(curr!=NULL)
            {
                if(headB==curr)        //BRUTE FORCE O(N^2)
                {
                    return headB;
                }
                curr=curr->next;
            }
             headB=headB->next;
        }
        return NULL;*/
        /*unordered_set<ListNode*> st;
        while(headA!=NULL)
        {
            st.insert(headA);
            headA=headA->next;
        }
        while(headB!=NULL)
        {
            if(st.find(headB)!=st.end())
            {
                return headB;            BETTER SOLUTION O(N+M) AND SC O(N);
            }
            headB=headB->next;
        }
        return NULL;*/
        /*ListNode* d1=headA;
        ListNode* d2=headB;
        int count1=0;
        int count2=0;
        while(d1!=NULL || d2!=NULL)
        {
            if(d1!=NULL){
            count1++;
            d1= d1->next;
            }
            if(d2!=NULL)
            {
                count2++;
                d2=d2->next;
            }
        }
        d1=headA;
        d2=headB;
        if(count1>count2)
        {
            count1=count1-count2;
            while(count1!=0)
            {
                d1=d1->next;
                count1--;
            }
            
        }
        else if(count1<count2)
        {
            count2=count2-count1;
            while(count2!=0)
            {
                d2=d2->next;
                count2--;
            }
                                               // OPTIMAL APPROACH 1 TC O(N+M) SC O(1)
        }
        while(d1!=NULL)
        {
            if(d1==d2)
            {
                return d1;
            }
            d1=d1->next;
            d2=d2->next;
        }
        return NULL;*/
        ListNode * d1=headA;
        ListNode* d2=headB;
        while(d1!=NULL || d2!=NULL)
        {
            if(d1==d2)
            {
                return d1;
            }
            if(d1==NULL)
            {
                d1=headB;
            }else{
                d1=d1->next;
            }
            if(d2==NULL)
            {
                d2=headA;
            }
            else{
                d2=d2->next; 
            }
            
           
        }
        return NULL;
        
    }
};
