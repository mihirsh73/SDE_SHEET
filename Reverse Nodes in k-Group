/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
       /* if(head==NULL) return NULL;
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* next=NULL;
        for(int i=0; i<k; i++)
        {
            if(curr==NULL)
            {
                return head;
            }
            curr=curr->next;
        }
        curr=head;                                      // TC O(N) AND SC O(N/K);
        int count=0;
        while(curr!=NULL && count<k)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
            count++;
        }
        if(next!=NULL)
        {
            head->next =reverseKGroup(next,k);
        }
        return prev;*/
        if(head==NULL) return NULL;
        ListNode* d= new ListNode(0);
        ListNode* curr=d,*prev=d,*nex=d;                                    // TC O(N) AND SC O(1)
        d->next=head;
        int count=0;
        while(curr->next!=NULL)
        {
            count++;
            curr=curr->next;
        }
       
        
        while(count>=k)
        {
            curr=prev->next;
            nex=curr->next;
            for(int i=1; i<k; i++)
            {
                curr->next=nex->next;
                nex->next=prev->next;
                prev->next=nex;
                nex=curr->next;
            }
            prev=curr;
            count -=k;
        }
        return d->next;
        
        
        
    }
};
