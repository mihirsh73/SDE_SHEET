class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int leftmin[heights.size()];   //leftwall
        int rightmin[heights.size()]; // rightwall
        stack<int> st;
        for(int i=0; i<heights.size(); i++)                         // TC O(N) SC O(N)
        {
            while(st.empty()==false && heights[st.top()]>=heights[i])
            {
                st.pop();
            }
            if(st.empty()==true)
            {
                leftmin[i]=0;
            }
            else{
                leftmin[i]=st.top()+1;
            }
            st.push(i);
        }
        while(st.empty()==false)
        {
            st.pop();
        }
        for(int i=heights.size()-1; i>=0;i--)
        {
            while(st.empty()==false && heights[st.top()]>=heights[i])
            {
                st.pop();
            }
            if(st.empty()==true)
            {
                rightmin[i]=heights.size()-1;
            }
            else{
                rightmin[i]=st.top()-1;
            }
            st.push(i);
        }
        int ans=INT_MIN;
        for(int i=0; i<heights.size(); i++)
        {
            ans = max(ans,(rightmin[i]-leftmin[i]+1)*heights[i]);
        }
        return ans;
        
        
    }
};
