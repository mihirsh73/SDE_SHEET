/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode*  head)
    {
        if(head==NULL)
        {
            return NULL;
        }
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* next=NULL;
        while(curr!=NULL)
        {
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        /*vector<int> res;
        while(head!=NULL)
        {
            res.push_back(head->val);
            head=head->next;
        }
        for(int i=0; i<res.size()/2; i++)
        {                                                // TC O(N) SC O(N);
            if(res[i]!=res[res.size()-1-i])
            {
                return false;
            }
            
        }
        return true;
        */
        if(head==NULL)
        {
            return true;
        }
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast->next!=NULL && fast->next->next!=NULL)      // TC O(N) SC O(1)
        {
            fast=fast->next->next;
            slow=slow->next;
        }
        
        slow->next=reverse(slow->next);
        slow=slow->next;
        
        while(slow!=NULL)
        {
            if(head->val!=slow->val)
            {
                cout<<slow->val<<endl;
                return false;
            }
            slow=slow->next;
            head=head->next;
        }
        return true;
    }
};
